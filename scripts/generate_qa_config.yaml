global:
  base_dir: qa_generation_input
  output_dir: qa_generation_output
  output_base_path: /var/kolo_data
  ollama_url: http://localhost:11434/api/generate

providers:
  question:
    provider: openai # Use "ollama" or "openai"
    model: gpt-4o-mini
  answer:
    provider: openai # Use "ollama" or "openai"
    model: gpt-4o-mini

QuestionInstructionList:
  - name: 'ToneInstructions'
    instruction:
      - 'Adopt a casual tone with everyday language.'
      - 'Use a formal tone with polite, sophisticated language.'
      - 'Write as if you are a curious beginner, eager to learn.'
      - 'Explain using technical jargon as a seasoned developer would.'
      - 'Speak simply and clearly, as if explaining to a non-expert.'
      - 'Inject a bit of sarcasm to highlight absurdities humorously.'
      - 'Maintain a professional business tone with formal vocabulary.'
      - 'Express passion and advocacy for the subject matter.'
      - 'Speak in a direct, no-nonsense tone.'
      - 'Be verbose and elaborate, providing rich details.'
      - 'Adopt a friendly and approachable tone.'
      - 'Blend colloquial expressions with precise technical references.'
      - 'Exhibit skepticism by questioning assumptions thoughtfully.'
      - 'Narrate as if telling an engaging story.'
      - 'Use witty, playful language to keep the reader engaged.'

GenerateQuestionLists:
  - name: 'DocumentList'
    questions:
      - 'Write a question asking for detailed explanations on how to utilize the documentation, including key steps, prerequisites, and potential pitfalls.'
      - 'Craft a question from a user trying to decipher the structure of the documentation and its intended use for various features.'
      - 'Formulate a question seeking best practices for following and applying the guidelines presented in the documentation.'
      - 'Compose a question that asks for clarifications on ambiguous sections of the documentation with an emphasis on practical applications.'
      - 'Create a question from a novice perspective, asking for a broad yet detailed overview of the documentation content.'
      - 'Generate a question targeting specific implementation details mentioned in the documentation, requesting step-by-step guidance.'
      - 'Draft a question where the user seeks advice on leveraging the documentation to solve real-world challenges.'
      - 'Pose a question that identifies potential gaps in the documentation and invites suggestions for improvement.'
      - 'Invent a question from someone looking to integrate documented processes into an existing workflow.'
      - 'Devise a question asking about the underlying rationale behind the documentation’s structure and instructions.'

  - name: 'CodingList'
    questions:
      - 'Formulate a question asking for an explanation of specific code segments and how they contribute to the overall functionality.'
      - 'Compose a question that explores various methods within the code, comparing their benefits and trade-offs.'
      - 'Write a question where the user wants to debug or optimize a particular piece of code, including context and error details.'
      - 'Generate a question asking for a detailed walkthrough of the code logic, highlighting critical variables and control structures.'
      - 'Draft a question requesting clarification on how the code interacts with external libraries or APIs, with concrete examples.'
      - 'Pose a question from a developer seeking insight into the rationale behind a specific algorithm implemented in the code.'
      - 'Create a question asking for best practices in refactoring or enhancing the provided code sample.'
      - 'Devise a question where the user compares multiple coding approaches and needs advice on the most efficient solution.'
      - 'Generate a question challenging the LLM to identify potential bugs or performance bottlenecks in the code snippet.'
      - 'Invent a question that asks for a concise summary of the code’s purpose along with an explanation of its key functions.'

FileHeaders:
  - name: 'DefaultFileHeader'
    description: 'The file contents for: {file_name}'

AnswerPrompt:
  - name: 'DefaultAnswerPrompt'
    description: |
      {file_content}
      {instruction}
      {question}

QuestionPrompt:
  - name: 'NoFileName'
    description: |
      {generate_question}
      {instruction}
      {file_content}
  - name: 'WithFileName'
    description: |
      {generate_question}
      {instruction}
      You are required to reference {file_name_list} in the question that you create!
      {file_content}

file_groups:
  # UninstallModel:
  #   iterations: 5
  #   files:
  #     - uninstall_model.ps1
  #   question_prompt: WithFileName
  #   generate_question_list: [CodingList]
  #   question_instruction_list: [ToneInstructions]
  #   file_header: DefaultFileHeader
  #   answer_prompt: DefaultAnswerPrompt
  #   answer_instruction_list: [Default]
  # README:
  #   iterations: 5
  #   files:
  #     - README.md
  #   question_prompt: NoFileName
  #   generate_question_list: [DocumentList]
  #   question_instruction_list: [ToneInstructions]
  #   file_header: DefaultFileHeader
  #   answer_prompt: DefaultAnswerPrompt
  #   answer_instruction_list: [Default]
  # DeleteModel:
  #   iterations: 5
  #   files:
  #     - delete_model.ps1
  #   question_prompt: WithFileName
  #   generate_question_list: [CodingList]
  #   question_instruction_list: [ToneInstructions]
  #   file_header: DefaultFileHeader
  #   answer_prompt: DefaultAnswerPrompt
  #   answer_instruction_list: [Default]
  # BuildImage:
  #   iterations: 5
  #   question_prompt: WithFileName
  #   generate_question_list: [CodingList, DocumentList]
  #   question_instruction_list: [ToneInstructions]
  #   file_header: DefaultFileHeader
  #   answer_prompt: DefaultAnswerPrompt
  #   answer_instruction_list: [Default]
  #   files:
  #     - build_image.ps1
  #     - dockerfile
  #     - supervisord.conf
  # TrainTorchTune:
  #   iterations: 5
  #   question_prompt: WithFileName
  #   generate_question_list: [CodingList]
  #   question_instruction_list: [ToneInstructions]
  #   file_header: DefaultFileHeader
  #   answer_prompt: DefaultAnswerPrompt
  #   answer_instruction_list: [Default]
  #   files:
  #     - train_model_torchtune.ps1
  #     - merge_lora.py
  #     - convert_jsonl_to_json.py
  # TrainUnsloth:
  #   iterations: 5
  #   question_prompt: WithFileName
  #   generate_question_list: [CodingList]
  #   question_instruction_list: [ToneInstructions]
  #   file_header: DefaultFileHeader
  #   answer_prompt: DefaultAnswerPrompt
  #   answer_instruction_list: [Default]
  #   files:
  #     - train_model_unsloth.ps1
  #     - train.py
  # InstallModel:
  #   iterations: 5
  #   question_prompt: WithFileName
  #   generate_question_list: [CodingList]
  #   question_instruction_list: [ToneInstructions]
  #   file_header: DefaultFileHeader
  #   answer_prompt: DefaultAnswerPrompt
  #   answer_instruction_list: [Default]
  #   files:
  #     - install_model.ps1
  # ListModels:
  #   iterations: 5
  #   question_prompt: WithFileName
  #   generate_question_list: [CodingList]
  #   question_instruction_list: [ToneInstructions]
  #   file_header: DefaultFileHeader
  #   answer_prompt: DefaultAnswerPrompt
  #   answer_instruction_list: [Default]
  #   files:
  #     - list_models.ps1
  # FineTuningGuide:
  #   iterations: 5
  #   question_prompt: NoFileName
  #   generate_question_list: [DocumentList]
  #   question_instruction_list: [ToneInstructions]
  #   file_header: DefaultFileHeader
  #   answer_prompt: DefaultAnswerPrompt
  #   answer_instruction_list: [Default]
  #   files:
  #     - FineTuningGuide.md
  GenerateTrainingDataGuide:
    iterations: 3
    question_prompt: NoFileName
    generate_question_list: [DocumentList]
    question_instruction_list: [ToneInstructions]
    file_header: DefaultFileHeader
    answer_prompt: DefaultAnswerPrompt
    answer_instruction_list: [Default]
    files:
      - GenerateTrainingDataGuide.md
