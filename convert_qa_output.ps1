param(
    # Specify the QA output directory name (default is "qa_generation_output")
    [string]$qa_outputDir = "qa_generation_output"
)

# Define fixed values for file names and container/environment
# Adjust the host path if needed; here we assume the host directory "/var/kolo_data"
# maps to "/app" inside the container.
$hostBaseDir = "/var/kolo_data"
$appBaseDir = "/app"

# Construct the input directory path for the host and container
$inputDirHost = "$hostBaseDir/$qa_outputDir"
$inputDirContainer = "$appBaseDir/$qa_outputDir"

$qaJsonlFile = "$appBaseDir/data.jsonl"  # File generated by parse_qa_data.py (JSONL format)
$finalJsonFile = "$appBaseDir/data.json"   # File produced by convert_jsonl_to_json.py
$containerName = "kolo_container"
$envActivate = "source /opt/conda/bin/activate kolo_env"

# Step 1: Run parse_qa_data.py inside the container with the custom input directory
try {
    Write-Host "Running parse_qa_data.py in container $containerName with input directory $inputDirContainer..."
    $parseCmd = "$envActivate && python /app/parse_qa_data.py --qa_output $inputDirContainer --output_file $qaJsonlFile"
    docker exec -it $containerName bash -c $parseCmd

    if ($LASTEXITCODE -eq 0) {
        Write-Host "parse_qa_data.py executed successfully." -ForegroundColor Green
    }
    else {
        Write-Host "Failed to run parse_qa_data.py." -ForegroundColor Red
        exit 1
    }
}
catch {
    Write-Host "An error occurred while running parse_qa_data.py: $_" -ForegroundColor Red
    exit 1
}

# Step 2: Run convert_jsonl_to_json.py inside the container
try {
    Write-Host "Running convert_jsonl_to_json.py in container $containerName..."
    $convertCmd = "$envActivate && python /app/convert_jsonl_to_json.py '$qaJsonlFile' '$finalJsonFile'"
    docker exec -it $containerName bash -c $convertCmd

    if ($LASTEXITCODE -eq 0) {
        Write-Host "Conversion successful! JSON file created at $finalJsonFile." -ForegroundColor Green
    }
    else {
        Write-Host "Conversion script failed." -ForegroundColor Red
        exit 1
    }
}
catch {
    Write-Host "An error occurred while running convert_jsonl_to_json.py: $_" -ForegroundColor Red
    exit 1
}
